name: Deploy Staging

# on:
#  push:
#    branches:
#        - master
on: pull_request
jobs:
  build:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v1

      - name: Try Build
        run: ./not-exist-file.sh it bloke build

      - name: Start SSH via Ngrok
        if: ${{ failure() }}
        run: curl -sL https://gist.githubusercontent.com/retyui/7115bb6acf151351a143ec8f96a7c561/raw/7099b9db76729dc5761da72aa8525f632d8875c9/debug-github-actions.sh | bash
        env:
          # After sign up on the https://ngrok.com/
          # You can find this token here: https://dashboard.ngrok.com/get-started/setup
          # NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
          NGROK_TOKEN: 1o8WjMa8Z9FI0EzEkZogyAyowfV_6FRRjicyhWBAUk3NT2Ts7

          # This password you will use when authorizing via SSH 
          # USER_PASS: ${{ secrets.USER_PASS }}
          USER_PASS: 123

      - name: Don't kill instace
        if: ${{ failure() }}
        run: sleep 1h # Prevent to killing instance after failure
 deploy-staging:
   runs-on: ubuntu-latest

   steps:
   - uses: actions/checkout@v2
   - name: Use Node.js ${{ matrix.node-version }}
     uses: actions/setup-node@v1
     with:
       node-version: '12.x'

   # https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
   - name: Cache node modules
     uses: actions/cache@v2
     env:
       cache-name: cache-node-modules
     with:
     # npm cache files are stored in `~/.npm` on Linux/macOS
       path: ~/.npm
       key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
       restore-keys: |
         ${{ runner.os }}-build-${{ env.cache-name }}-
         ${{ runner.os }}-build-
         ${{ runner.os }}-

   - name: Install dependencies
     run: npm ci

   - name: 'Deploy and test Staging'
     env:
       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
     run: |
      cd services
      for DIR in *; do (cd $DIR  && npx sls deploy --stage staging && cd ..) & done; wait
      echo "Finished deployment in staging"
      for DIR in *; do (cd $DIR && npx sls invoke test --compilers js:babel-core/register --stage staging && cd ..) & done; wait
      echo "Finished running tests in staging environment"
