openapi: 3.0.0
info:
  title: bizTechBackend
  description: "This is the API Documentation for the bizTechBackend. The function implementations can be found here: https://github.com/ubc-biztech/serverless-biztechapp."
  contact:
    name: Biztech Developers
    email: "dev@ubcbiztech.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  version: 1.0.0
servers:
  - url: https://j4deuy9o31.execute-api.us-west-2.amazonaws.com/dev
    description: Development Server
  - url: https://rfibhoze52.execute-api.us-west-2.amazonaws.com/staging
    description: Staging Server
  - url: https://iva9ozj4zd.execute-api.us-west-2.amazonaws.com/prod
    description: Production Server
paths:
  /events:
    get:
      summary: Returns list of events
      operationId: getEvents
      tags:
        - Events
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/EventsGetResponse'
        '403':
          description: 'Forbidden'
        '406':
          description: 'Year query parameter must be a number'
        '502':
          description: 'Internal Server Error'
      parameters:
        - name: "id"
          in: "header"
          description: "The id of the event"
          required: false
          schema:
            type: string
        - name: "year"
          in: "header"
          description: "The year of the event"
          required: false
          schema:
            type: integer
            format: int64
    post:
      summary: Creates a new event
      operationId: postEvent
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/EventsPostBody'
      responses:
        '201':
          description: 'Created event with id {string} for the year {integer}!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsPostResponse'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
        '406':
          description: '{object} is missing from request body'
        '409':
          description: 'A database entry with the same event id and yearalready exists'
        '502':
          description: 'Internal Server Error'
  /events/{id}/{year}:
    get:
      summary: Returns an event based on id and year
      operationId: getEvent
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EventsGetResponse'
                  - $ref: '#/components/schemas/EventsGetUserResponse'
                  - $ref: '#/components/schemas/EventsGetCountResponse'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
        '404':
          description: 'event with id {string} and secondaryKey {integer} could not be found. Make sure you have provided them correctly.'
        '406':
          description: 'Year query parameter must be a number \\\\\ Only one true parameter is permissible at a time.'
        '502':
          description: 'Internal Server Error'
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The id of the event"
          schema:
            type: string
        - name: "year"
          in: "path"
          required: true
          description: "The year of the event"
          schema:
            type: integer
            format: int64
        - name: "users"
          in: "query"
          required: false
          description: "Returns all users who signed up for the event"
          schema:
            type: boolean
        - name: "count"
          in: "query"
          required: false
          description: "Returns the registered, checkedIn, and waistlist count for an event"
          schema:
            type: boolean
    patch:
      summary: Updates or replaces an event based on id and year
      operationId: patchEvent
      tags:
        - Events
      requestBody:
        required: false
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/EventsPatchBody'
      responses:
        '200':
          description: 'Updated event with id {string} and year {integer}!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsPatchResponse'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
        '404':
          description: 'event with id {string} and secondaryKey {integer} could not be found. Make sure you have provided them correctly.'
        '406':
          description: 'Year query parameter must be a number \\\\\ Only one true parameter is permissible at a time.'
        '502':
          description: 'Internal Server Error'
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The id of the event"
          schema:
            type: string
        - name: "year"
          in: "path"
          required: true
          description: "The year of the event"
          schema:
            type: integer
            format: int64
    delete:
      summary: Deletes an event based on id and year
      operationId: deleteEvent
      tags:
        - Events
      responses:
        '200':
          description: 'Deleted event with id {string} and year {integer}!'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
        '404':
          description: 'event with id {string} and secondaryKey {integer} could not be found. Make sure you have provided them correctly.'
        '406':
          description: 'Year query parameter must be a number \\\\\ Only one true parameter is permissible at a time.'
        '502':
          description: 'Internal Server Error'
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The id of the event"
          schema:
            type: string
        - name: "year"
          in: "path"
          required: true
          description: "The year of the event"
          schema:
            type: integer
            format: int64
  /users:
    get:
      summary: Returns list of users
      operationId: getUsers
      tags:
        - Users
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/UsersGetResponse'
        '401':
          description: Unauthorized
        '502':
          description: 'Internal Server Error'
    post:
      summary: Creates a new user
      operationId: postUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/UsersPostBody'
      responses:
        '201':
          description: 'Created!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPostResponse'
        '401':
          description: Unauthorized
        '406':
          description: '{object} not specified'
        '409':
          description: 'User could not be created because {object} already exists'
        '502':
          description: 'Internal Server Error'
  /users/{id}:
    get:
      summary: Returns a user based on id
      operationId: getUser
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UsersGetResponse'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'  
        '404':
          description: 'user with id {integer} could not be found. Make sure you have provided the correct id.'
        '406':
          description: '(object) is not a (object)!'
        '502':
          description: 'Internal Server Error'
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The id of the user"
          schema:
            type: string
    patch:
      summary: Updates or replaces a user based on id
      operationId: patchUser
      tags:
        - Users
      requestBody:
        required: false
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/UsersPostBody'
      responses:
        '200':
          description: 'Updated user with id {string}!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPostResponse'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'  
        '404':
          description: 'user with id {integer} could not be found. Make sure you have provided the correct id.'
        '406':
          description: '(object) is not a (object)!'
        '502':
          description: 'Internal Server Error'
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The id of the user"
          schema:
            type: string
    delete:
      summary: Deletes a user based on id
      operationId: deleteUser
      tags:
        - Users
      responses:
        '200':
          description: 'Deleted user with id {string}!'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'  
        '404':
          description: 'user with id {integer} could not be found. Make sure you have provided the correct id.'
        '406':
          description: '(object) is not a (object)!'
        '502':
          description: 'Internal Server Error'
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The id of the user"
          schema:
            type: string
  /users/favEvent/{id}:
    patch:
      summary: Update event in user's favourite event based on id
      operationId: patchFavEventUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/FavEventPatchBody'
      responses:
        '200':
          description: 'Favourited event with eventID {string} for the year {integer}'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'  
        '404':
          description: 'user with id {integer} could not be found. Make sure you have provided the correct id.'
        '406':
          description: '(object) is not a (object)!'
        '502':
          description: 'Internal Server Error'
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The id of the user"
          schema:
            type: string
  /registrations:
    get:
      summary: Returns list of registrations
      operationId: getRegistrations
      tags:
        - Registrations
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/RegistrationsGetResponse'
        '400':
          description: "A(n) eventID or year (must have both or neither) id was not provided. Check query params"
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
        '406':
          description: 'Year query parameter must be a number'
        '502':
          description: 'Internal Server Error'
      parameters:
        - name: "eventID"
          in: "header"
          description: "The id of the event (Only required if year is also provided)"
          required: true
          schema:
            type: string
        - name: "year"
          in: "header"
          description: "The year of the event (Only required if eventID is also provided)"
          required: true
          schema:
            type: integer
            format: int64
        - name: "id"
          in: "header"
          description: "The id of the user (Only required if eventID and year are not provided)"
          required: true
          schema:
            type: integer
            format: int64
    post:
      summary: Creates a new registration
      operationId: postRegistration
      tags:
        - Registrations
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/RegistrationsPostBody'
      responses:
        '201':
          description: 'Created event with id {string} for the year {integer}!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationsPostResponse'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
        '406':
          description: '{object} is missing from request body'
        '409':
          description: 'Create error because the registration entry for user {integer} and with eventID;year {string} already exists'
        '502':
          description: 'Internal Server Error'
  /registrations/{id}:
    put:
      summary: Update registration entry based on id
      operationId: putRegistration
      tags:
        - Registrations
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/RegistrationsPostBody'
      responses:
        '200':
          description: 'User with id {integer} successfully registered (through update) to status {string}!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationsPostResponse'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
        '404':
          description: 'User with id {integer} could not be found. Make sure you have provided the correct id.'
        '406':
          description: '{object} is missing from request body'
        '502':
          description: 'Internal Server Error'
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The id of the user"
          schema:
            type: string
  /memberships:
    get:
      summary: Returns all users who signed up for membership
      operationId: getMemberships
      tags:
        - Memberships
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/MembershipsGetResponse'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
        '502':
          description: 'Internal Server Error'


components:
  schemas:
    EventsGetResponse:
      type: object
      required:
        - id
        - year
        - capac
      properties:
        id:
          type: string
        year:
          type: integer
          format: int64
        capac:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
        description:
          type: string
        elocation:
          type: string
        ename:
          type: string
        startDate:
          type: string
        endDate:
          type: string
        imageUrl:
          type: string
    EventsGetUserResponse:
      type: array
      items: 
        $ref: '#/components/schemas/UsersGetResponse'
    EventsGetCountResponse:
      type: object
      required:
        - registeredCount
        - checkedInCount
        - waitlistCount
      properties:
        registeredCount:
          type: integer
          format: int64
        checkedInCount:
          type: integer
          format: int64
        waitlistCount:
          type: integer
          format: int64
    EventsPostBody:
      type: object
      required:
        - id
        - year
        - capac
      properties:
        id:
          type: string
        year:
          type: integer
          format: int64
        capac:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
        description:
          type: string
        elocation:
          type: string
        ename:
          type: string
        startDate:
          type: string
        endDate:
          type: string
        imageUrl:
          type: string
    EventsPostResponse:
      type: object
      required:
        - message
        - response
        - item
      properties:
        message:
          type: string
        response:
          type: object
        item:
          $ref: '#/components/schemas/EventsPostBody'
    EventsPatchBody:
      type: object
      properties:
        id:
          type: string
        year:
          type: integer
          format: int64
        capac:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        description:
          type: string
        elocation:
          type: string
        ename:
          type: string
        startDate:
          type: string
        endDate:
          type: string
        imageUrl:
          type: string
    EventsPatchResponse:
      type: object
      required:
        - message
        - response
      properties:
        message:
          type: string
        response:
          type: object
          required:
            - Attributes
          properties:
            Attributes: 
              $ref: '#/components/schemas/EventsPatchBody'


    UsersGetResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        fname:
          type: string
        lname:
          type: string
        email:
          type: string
        faculty:
          type: string
        userYear:
          type: string
        gender:
          type: string
        diet:
          type: string
        admin:
          type: boolean
        favedEventsArray:
            type: array
            items:
              type: string
    UsersPostBody:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        fname:
          type: string
        lname:
          type: string
        email:
          type: string
        faculty:
          type: string
        userYear:
          type: string
        gender:
          type: string
        diet:
          type: string
        admin:
          type: boolean
        favedEventsArray:
            type: array
            items:
                type: string
    UsersPostResponse:
      type: object
      required:
        - message
        - params
      properties:
        message: 
          type: string
        params:
          type: object
          required:
            - Item
          properties:
            Item:
              $ref: '#/components/schemas/UsersPostBody'
    FavEventPatchBody:
      type: object
      required:
        - eventID
        - year
        - isFavourite
      properties:
        eventID:
          type: string
        year:
          type: integer
          format: int64
        isFavourite:
          type: boolean
    RegistrationsGetResponse:
      type: object
      required:
        - size
        - data
      properties:
        size:
          type: integer
          format: int64
        data:
          type: array
          items:
            $ref: '#/components/schemas/UsersGetResponse'
    RegistrationsPostBody:
      type: object
      required:
        - eventID
        - year
        - id
        - registrationStatus
      properties:
        eventID:
          type: string
        year: 
          type: integer
          format: int64
        id: 
          type: integer
          format: int64
        registrationStatus:
          type: string
          enum: ["registered, checkedIn, waitlisted"]
    RegistrationsPostResponse:
      type: object
      required:
        - registrationStatus
        - message
        - response
      properties:
        registrationStatus:
          type: string
          enum: ["registered, checkedIn, waitlisted"]
        message:
          type: string
        response:
          type: object
          required:
            - Attributes
          properties:
            Attributes:
              $ref: '#/components/schemas/RegistrationsPostBody'
    MembershipsGetResponse:
      type: object
      required:
        - id
        - timestamp
        - email
        - education
        - first_name
        - last_name
        - pronouns
        - heard_from
      properties:
        id:
          type: integer
          format: int64
        timestamp:
          type: integer
          format: int64
        email:
          type: string
        education:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        pronouns:
          type: string
        student_number:
          type: integer
          format: int64
        year:
          type: string
        faculty:
          type: string
        major:
          type: string
        prev_member:
          type: boolean
        international:
          type: boolean
        topics:
          type: array
          items:
            type: string
        heard_from:
          type: string
        university:
          type: string
        high_school:
          type: string
          
          
        
      
      
    
