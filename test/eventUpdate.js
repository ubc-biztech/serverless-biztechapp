'use strict';
const AWSMock = require('aws-sdk-mock');

// tests for eventUpdate
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('eventUpdate', '/handlers/event.js', 'update');

const updatePayload = {
  id: 'existingEvent1',
  ename: 'Updated Event',
  description: 'Updated test event description',
  startDate: '20200607T000000-0400',
  endDate: '20200607T000000-0400',
  capac: 100,
  facebookUrl: 'https://www.facebook.com/BizTechUBC/',
  imageUrl: 'https://www.facebook.com/BizTechUBC/',
  elocation: 'https://i.picsum.photos/id/320/200/300.jpg',
  longitude: -120.00,
  latitude: 78.00,
  createdAt: '20200607T000000-0400',
  updatedAt: '20200607T000000-0400'
};

describe('eventUpdate', () => {

  const existingEvents = ['existingEvent1', 'existingEvent2'];

  before(() => {

    AWSMock.mock('DynamoDB.DocumentClient', 'get', (params, callback) => {

      const { id } = params.Key;

      if(params.TableName.includes('biztechEvents')) {

        // if id found
        if(existingEvents.includes(id)) callback(null, { Item: updatePayload });
        // if id not found
        else callback(null, { Item: null });

      }

    });

    AWSMock.mock('DynamoDB.DocumentClient', 'update', (params, callback) => {

      if(params.Key.id && existingEvents.includes(params.Key.id)) {

        callback(null, 'successfully updated item in database');

      }
      else callback(new Error(''));

    });

  });
  after(() => {

    AWSMock.restore('DynamoDB.DocumentClient');

  });

  it('return 400 for trying to update an event with no id', async () => {


    const response = await wrapped.run({ pathParameters: {} });
    expect(response.statusCode).to.be.equal(400);

  });

  it('return 404 for trying to update an event that doesn\'t exist', async () => {

    const unknownId = 'nonExistingEvent';

    const response = await wrapped.run({
      pathParameters: { id: unknownId },
      body: JSON.stringify(updatePayload)
    });
    expect(response.statusCode).to.be.equal(404);

  });

  it('return 200 for successfully updating an event', async () => {

    const validId = existingEvents[0];

    const response = await wrapped.run({
      pathParameters: { id: validId },
      body: JSON.stringify(updatePayload)
    });
    expect(response.statusCode).to.be.equal(200);

  });

});
