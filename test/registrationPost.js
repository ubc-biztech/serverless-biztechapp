'use strict';

// tests for registrationPost
// Generated by serverless-mocha-plugin

const AWSMock = require('aws-sdk-mock'); 
const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('registrationPost', '/handlers/registration.js', 'post');


describe('registrationPost', () => {

  before(() => {

    AWSMock.mock('DynamoDB.DocumentClient', 'get', (params, callback) => {
          callback(null, {
            Item: 'not null user'
          })
    })
   
    AWSMock.mock('DynamoDB.DocumentClient', 'update', (params, callback) => {
          callback(new Error("error"))
    });

  });
  after(() => {
    AWSMock.restore('DynamoDB.DocumentClient');
  });

  it('return 406 when id is not given ', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        eventID: "event"
      })
    });
    expect(response.statusCode).to.be.equal(406);
  });

  it('return 406 when no eventID is provided', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        id: '12200034', 
        registrationStatus: "registered"
      })
    });
    expect(response.statusCode).to.be.equal(406);
  });

  it('return 406 when no registrationStatus is provided', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        id: '12200034', 
        eventID: "event"
      })
    });
    expect(response.statusCode).to.be.equal(406);
  }); 

  it('returns 502 when registration status is registered', async () => {
    const response = await wrapped.run({ 
        body: JSON.stringify({
          id: '12200034', 
          eventID: "event", 
          registrationStatus: "not"
        }),
    });
    expect(response.statusCode).to.equal(502);
    }); 

});
