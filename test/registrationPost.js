'use strict';

// tests for registrationPost
// Generated by serverless-mocha-plugin

const AWSMock = require('aws-sdk-mock'); 
const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('registrationPost', '/handlers/registration.js', 'post');

const userPayload = {
  id: '6456456464',
  fname: 'user',
  lname: 'man',
  faculty: 'Science',
  email: 'test@test.com'
};

describe('registrationPost', () => {

  before(() => {

    AWSMock.mock('DynamoDB.DocumentClient', 'get', (params, callback) => {
      callback(null, { Item: userPayload })
    })
   
    AWSMock.mock('DynamoDB.DocumentClient', 'update', (params, callback) => {
      callback(null, "Updated!")
    });

  });

  after(() => {

    AWSMock.restore('DynamoDB.DocumentClient');

  });

  // NEED A TEST FOR WHEN THE EVENT IS FULL

  it('should return 406 when id is not given ', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        eventID: "event"
      })
    });
    expect(response.statusCode).to.be.equal(406);
  });

  it('should return 406 when no eventID is provided', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        id: '12200034', 
        registrationStatus: "registered"
      })
    });
    expect(response.statusCode).to.be.equal(406);
  });

  it('should return 406 when no registrationStatus is provided', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        id: '12200034', 
        eventID: "event"
      })
    });
    expect(response.statusCode).to.be.equal(406);
  }); 

  it('should return 201 for successful creation of registration', async () => {
    const response = await wrapped.run({ 
        body: JSON.stringify({
          id: '12200034', 
          eventID: "event", 
          registrationStatus: "not"
        }),
    });
    expect(response.statusCode).to.equal(201);
    });
});
