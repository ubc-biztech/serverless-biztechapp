'use strict';

// tests for userGet
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
const AWSMock = require('aws-sdk-mock');
let wrapped = mochaPlugin.getWrapper('userGet', '/handlers/user.js', 'get');
const AWS = require('aws-sdk');

// If want to invoke mocha instead of sls invoke
// let wrapped = mochaPlugin.getWrapper('userGet', '../../../handlers/user.js', 'get');
describe('userGet', () => {
  before(() => {

    AWSMock.mock('DynamoDB.DocumentClient', 'get', function (params, callback){
      if (params.Key.id == 332332) {
        Promise.resolve(
          callback(null, {
            Item: 'not null user'
          } 
        ));
      }
    });
  });
  after(() => {

    AWSMock.restore('DynamoDB.DocumentClient');

  });

  it('successfully get user', async () => {
    AWSMock.mock('DynamoDB.DocumentClient', 'get', function (params, callback){
      if (params.Key.id == 332332) {
        Promise.resolve(
          callback(null, {
            Item: 'not null user'
          } 
        ));
      }
    });
    const response = await wrapped.run({
      pathParameters: {
        id: '332332'
      }
    });
    expect(response).to.not.be.empty;
    expect(response.statusCode).to.equal(200);

    const options = {
      region: "us-west-2"
    }
    const lambda = new AWS.Lambda(options);
    let params = {
      FunctionName: "biztechApp-dev-userGetAll",
    }
    lambda.invoke(params, function(err, data) {
      if (err) {
        console.log(err);
        throw err;
      }
      else console.log(data);
      console.log("ASDSADASDASDASD");
    });
    AWSMock.restore('DynamoDB.DocumentClient');
  });
});
