'use strict';

// tests for registrationPut
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('registrationPut', '/handlers/registration.js', 'put');
const AWSMock = require('aws-sdk-mock');
const event = require('./data/events.json').Items[0];
const getEventResponse = { Item: event }; 




describe('registrationPut', () => {
  //   before(() => {
  //     AWSMock.mock('DynamoDB.DocumentClient', 'get', function (params, callback) {
  //       if(params.TableName.includes('biztechEvents')) {
  //         Promise.resolve(
  //           callback(null, getEventResponse)
  //       )} else {
  //         Promise.resolve(
  //         callback(null, {
  //           Item: 'not a null item'
  //         }))
  //       }
  //     });
      
  //     AWSMock.mock('DynamoDB.DocumentClient', 'get', function (params, callback) {
  //         if (params.TableName.includes('biztechUsers')) {
  //           Promise.resolve(
  //             callback(null, {
  //               Item: "not a null item"
  //             }))
  //           } else {
  //             Promise.resolve(
  //               callback(null, {
  //                 Item: "not a null item"
  //               }))
  //             }
  //     }); 

  //     AWSMock.mock('DynamoDB.DocumentClient', 'update', (params, callback) => {
  //       callback(null, {
  //         Item: "not null"
  //       })
  // });




  //   });
  //   after(() => {
  //     AWSMock.restore('DynamoDB.DocumentClient');
  //   });

  it('should return 406 for no id', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        eventID: "event", 
        registrationStatus: "status"
      }),
      pathParameters: {
      }
    });
    expect(response.statusCode).to.equal(406);
  });

  it('should return 406 for no eventID provided', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        registrationStatus: "status"
      }),
      pathParameters: {
        id: "12345342"
      }
    });
    expect(response.statusCode).to.equal(406);
  });

  it('should return 406 for no registration status provided', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
        eventID: "event"
      }),
      pathParameters: {
        id: "12345342"
      }
    });
    expect(response.statusCode).to.equal(406);
  });

  it('should return 406 for no eventBody', async () => {
    const response = await wrapped.run({
      body: JSON.stringify({
      }),
      pathParameters: {
        id: "12345342"
      }
    });
    expect(response.statusCode).to.equal(406);
  });

});
