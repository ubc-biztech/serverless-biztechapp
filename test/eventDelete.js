'use strict';
const AWSMock = require('aws-sdk-mock');

// tests for eventDelete
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('eventDelete', '/handlers/event.js', 'delete');
const { EVENTS_TABLE } = require('../constants/tables');

describe('eventDelete', () => {

  const existingEvents = ['existingEvent1', 'existingEvent2'];

  before(() => {

    AWSMock.mock('DynamoDB.DocumentClient', 'get', (params, callback) => {

      const { id } = params.Key;

      if(params.TableName.includes(EVENTS_TABLE)) {

        // if id found
        if(existingEvents.includes(id)) callback(null, { Item: { id: 'exEv', year: 2020, capac: 100 } });
        // if id not found
        else callback(null, { Item: null });

      }

    });

    AWSMock.mock('DynamoDB.DocumentClient', 'delete', (params, callback) => {

      if(params.Key.id && existingEvents.includes(params.Key.id)) {

        callback(null, 'successfully deleted item in database');

      }
      else callback(new Error(''));

    });

  });
  after(() => {

    AWSMock.restore('DynamoDB.DocumentClient');

  });

  it('return 400 for trying to delete an event with no year', async () => {

    const validId = existingEvents[0];

    const response = await wrapped.run({ pathParameters: { id: validId} });
    expect(response.statusCode).to.be.equal(400);

  });

  it('return 400 for trying to delete an event with no id', async () => {

    const validId = existingEvents[0];

    const response = await wrapped.run({ pathParameters: { year: 2020 } });
    expect(response.statusCode).to.be.equal(400);

  });

  it('return 404 for trying to delete an event that doesn\'t exist', async () => {

    const unknownId = 'nonExistingEvent';

    const response = await wrapped.run({ pathParameters: { id: unknownId, year: 2020 } });
    expect(response.statusCode).to.be.equal(404);

  });

  it('return 200 for successfully deleting an event', async () => {

    const validId = existingEvents[0];

    const response = await wrapped.run({ pathParameters: { id: validId, year: 2020 } });
    expect(response.statusCode).to.be.equal(200);

  });

});
