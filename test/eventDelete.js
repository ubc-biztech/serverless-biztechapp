'use strict';
const AWSMock = require('aws-sdk-mock');

// tests for eventDelete
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('eventDelete', '/handlers/event.js', 'delete');

describe('eventDelete', () => {

  const existingEvents = ['existingEvent1', 'existingEvent2'];

  before(() => {

    AWSMock.mock('DynamoDB.DocumentClient', 'delete', (params, callback) => {
      if(params.Key.id && existingEvents.includes(params.Key.id)) {
        callback(null, "successfully deleted item in database");
      }
      else callback(new Error(""));
    });
    
  });
  after(() => {

    AWSMock.restore('DynamoDB.DocumentClient');

  });

  it('return 406 for trying to delete an event with no id', async () => {


    const response = await wrapped.run({ pathParameters: {} });
    expect(response.statusCode).to.be.equal(406);
    
  });

  it('return 502 for trying to delete an event that doesn\'t exist', async () => {

    const unknownId = 'nonExistingEvent';

    const response = await wrapped.run({ pathParameters: { id: unknownId } });
    expect(response.statusCode).to.be.equal(502);
    
  });

  it('return 200 for successfully creating an event', async () => {

    const validId = existingEvents[0];

    const response = await wrapped.run({ pathParameters: { id: validId } });
    expect(response.statusCode).to.be.equal(200);
    
  });

});