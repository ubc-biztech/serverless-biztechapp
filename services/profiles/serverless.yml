service: biztechApi-profiles
app: biztechapp

plugins:
  - serverless-dynamodb
  - serverless-offline
  - serverless-domain-manager
  - serverless-bundle
  - serverless-prune-plugin
  - serverless-mocha-plugin

provider:
  name: aws
  stage: ${file(../../serverless.common.yml):provider.stage}
  runtime: ${file(../../serverless.common.yml):provider.runtime}
  region: ${file(../../serverless.common.yml):provider.region}
  cfLogs: true
  environment:
    ENVIRONMENT: ${file(../../config.${self:provider.stage}.json):ENVIRONMENT}
    NODE_ENV: ${env:NODE_ENV}
    PROFILE_BUCKET: biztech-profile-pictures
  apiGateway:
    restApiId: !ImportValue ${self:provider.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId: !ImportValue ${self:provider.stage}-ExtApiGatewayRestApiRootResourceId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:Scan
        - s3:PutObject
      Resource:
        - "arn:aws:dynamodb:${aws:region}:*:table/biztechProfiles${self:provider.environment.ENVIRONMENT}"
        - "arn:aws:dynamodb:${aws:region}:*:table/biztechMembers2026${self:provider.environment.ENVIRONMENT}"
        - "arn:aws:s3:::biztech-profile-pictures/profile-pictures/*"

custom: ${file(../../serverless.common.yml):custom}

functions:
  createProfile:
    handler: handler.create
    events:
      - http:
          path: profiles
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}

  createPartialPartnerProfile:
    handler: handler.createPartialPartnerProfile
    events:
      - http:
          path: profiles/partner/partial
          method: post
          cors: true

  createCompanyProfile:
    handler: handler.createCompanyProfile
    events:
      - http:
          path: profiles/company
          method: post
          cors: true

  linkPartnerToCompany:
    handler: handler.linkPartnerToCompany
    events:
      - http:
          path: profiles/company/link-partner
          method: post
          cors: true

  syncPartnerData:
    handler: handler.syncPartnerData
    events:
      - http:
          path: profiles/sync-partner-data
          method: post
          cors: true

  getPublicProfile:
    handler: handler.getPublicProfile
    events:
      - http:
          path: profiles/profile/{profileID}
          method: get
          cors: true
          request:
            parameters:
              paths:
                profileID: true

  getUserProfile:
    handler: handler.getUserProfile
    events:
      - http:
          path: profiles/user/
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}

  updateUserProfile:
    handler: handler.updatePublicProfile
    events:
      - http:
          path: profiles/user/
          method: patch
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}
  getProfilePicUploadUrl:
    handler: handler.getProfilePicUploadUrl
    events:
      - http:
          path: profiles/profile-pic-upload-url
          method: post
          cors:
            origins:
              - http://localhost:3000
              - https://app.ubcbiztech.com
              - https://dev.v2.ubcbiztech.com
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Amz-Security-Token
              - X-Requested-With
            allowCredentials: false
            methods:
              - OPTIONS
              - POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}
