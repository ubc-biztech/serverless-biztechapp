# Always deploy the "hello" endpoint first (for any new environment)
service: biztechApi
app: biztechapp

plugins:
  - serverless-dynamodb
  - serverless-offline
  - serverless-domain-manager
  - serverless-bundle
  - serverless-prune-plugin
  - serverless-mocha-plugin

provider:
  name: aws
  stage: ${file(../../serverless.common.yml):provider.stage}
  apiKeys: ${file(../../serverless.common.yml):provider.apiKeys}
  runtime: ${file(../../serverless.common.yml):provider.runtime}
  region: ${file(../../serverless.common.yml):provider.region}
  cfLogs: true
  environment:
    NODE_ENV: ${env:NODE_ENV}

custom: ${file(../../serverless.common.yml):custom}

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /hello
          method: get
          cors: true

# Helps to share the endpoint between services
# https://serverless-stack.com/chapters/share-an-api-endpoint-between-services.html
resources:
  Resources:
    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ${self:service}-authorizer
        AuthorizerResultTtlInSeconds: 60
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - arn:aws:cognito-idp:us-west-2:432714361962:userpool/us-west-2_w0R176hhp
        RestApiId:
          "Fn::ImportValue": ${self:provider.stage}-ExtApiGatewayRestApiId
        Type: COGNITO_USER_POOLS

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:provider.stage}-ExtApiGatewayRestApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:provider.stage}-ExtApiGatewayRestApiRootResourceId

    CognitoAuthorizer:
      Value:
        Ref: CognitoAuthorizer
      Export:
        Name: CognitoAuthorizer-${self:provider.stage}
