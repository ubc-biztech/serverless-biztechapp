"use strict";
import AWSMock from "aws-sdk-mock";

// tests for eventUpdate
// Generated by serverless-mocha-plugin

import mochaPlugin from "serverless-mocha-plugin";
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper("eventUpdate", "/handler.js", "update");
import { EVENTS_TABLE } from "../../../constants/tables";

const updatePayload = {
  id: "existingEvent1",
  year: 2020,
  ename: "Updated Event",
  description: "Updated test event description",
  startDate: "20200607T000000-0400",
  endDate: "20200607T000000-0400",
  capac: 100,
  facebookUrl: "https://www.facebook.com/BizTechUBC/",
  imageUrl: "https://www.facebook.com/BizTechUBC/",
  elocation: "https://i.picsum.photos/id/320/200/300.jpg",
  longitude: -120.00,
  latitude: 78.00,
  createdAt: "20200607T000000-0400",
  updatedAt: "20200607T000000-0400",
  feedback: "updated-test-feedback-form-link",
};

describe("eventUpdate", () => {
  const existingEvents = [{ id: "existingEvent1", year: 2020 }];

  before(() => {
    // Mocks the GET request to DyanmoDB
    AWSMock.mock("DynamoDB.DocumentClient", "get", (params, callback) => {
      // Check if the table exists first
      if (params.TableName.includes(EVENTS_TABLE)) {
        // Check if an entry with the same id and year already exists in our table
        if (params.Key.id && params.Key.year && existingEvents.some(key => key.id === params.Key.id && key.year === params.Key.year)) callback(null, { Item: { id: params.Key.id, year: params.Key.year, capac: 100 } });

        // Id and year does not exist in our table
        else callback(null, { Item: null });
      }
    });

    AWSMock.mock("DynamoDB.DocumentClient", "update", (params, callback) => {
      // Check if an entry with the same id and year already exists in our table
      if (params.Key.id && params.Key.year && existingEvents.some(key => key.id === params.Key.id && key.year === params.Key.year)) {
        callback(null, "successfully updated item in database");
      }
      else callback(new Error(""));
    });
  });
  after(() => {
    AWSMock.restore("DynamoDB.DocumentClient");
  });

  it("return 400 for trying to update an event with no id", async () => {
    const response = await wrapped.run({ pathParameters: {} });
    expect(response.statusCode).to.be.equal(400);
  });

  it("return 404 for trying to update an event that doesn't exist", async () => {
    const unknownId = "nonExistingEvent";
    const validYear = existingEvents[0].year;
    const response = await wrapped.run({
      pathParameters: { id: unknownId, year: validYear },
      body: JSON.stringify(updatePayload)
    });
    expect(response.statusCode).to.be.equal(404);
  });

  it("return 404 for trying to update an year that doesn't exist", async () => {
    const validId = existingEvents[0].id;
    const unknownYear = 12345;
    const response = await wrapped.run({
      pathParameters: { id: validId, year: unknownYear },
      body: JSON.stringify(updatePayload)
    });
    expect(response.statusCode).to.be.equal(404);
  });

  it("return 200 for successfully updating an event", async () => {
    const validId = existingEvents[0].id;
    const validYear = existingEvents[0].year;

    const response = await wrapped.run({
      pathParameters: { id: validId, year: validYear },
      body: JSON.stringify(updatePayload)
    });
    expect(response.statusCode).to.be.equal(200);
  });
});
