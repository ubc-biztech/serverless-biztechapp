'use strict';
import AWSMock from 'aws-sdk-mock';

// tests for eventCreate
// Generated by serverless-mocha-plugin

import mochaPlugin from 'serverless-mocha-plugin';
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('eventCreate', '/handler.js', 'create');
import { EVENTS_TABLE } from '../../../constants/tables';

const eventPayload = {
  id: 'localTestEvent',
  year: 2020,
  ename: 'Local Test Event',
  description: 'Local test event description',
  startDate: '20200607T000000-0400',
  endDate: '20200607T000000-0400',
  capac: 100,
  facebookUrl: 'https://www.facebook.com/BizTechUBC/',
  imageUrl: 'https://www.facebook.com/BizTechUBC/',
  elocation: 'https://i.picsum.photos/id/320/200/300.jpg',
  longitude: -120.00,
  latitude: 78.00,
  createdAt: '20200607T000000-0400',
  updatedAt: '20200607T000000-0400',
  registrationQuestions: [
    {
      type: 'textField',
      label: 'This is a test question?',
      required: true,
    }
  ],
};

const eventPayloadWithRegistrationQuestionIds = {
  ...eventPayload,
  registrationQuestions: [{
    questionId: '61584a37-a497-4687-b774-18b49bd3a107',
    type: 'textField',
    label: 'This is a test question?',
    required: true,
  }]
}

describe('eventCreate', () => {

  // Stores the id and year of our current created events in a dictionary
  let createdEventsIdAndYear = [];

  before(() => {

    // Mocks the GET request to DynamoDB
    AWSMock.mock('DynamoDB.DocumentClient', 'get', (params, callback) => {

      // Check if the table exists first
      if (params.TableName.includes(EVENTS_TABLE)) {

        // Check if an entry with the same id and year already exists in our table
        if (params.Key.id && params.Key.year && createdEventsIdAndYear.some(key => key.id === params.Key.id && key.year === params.Key.year)) 
          callback(null, { Item: eventPayloadWithRegistrationQuestionIds });

        // Id and year does not exist in our table
        else callback(null, { Item: null });

      }

    });

    // Mocks the PUT request to DynamoDB
    AWSMock.mock('DynamoDB.DocumentClient', 'put', (params, callback) => {

      // Check if an entry with the same id and year already exists in our table
      if (params.Item.id && params.Item.year && createdEventsIdAndYear.some(key => key.id === params.Item.id && key.year === params.Item.year)) callback(new Error('event already exists!'));

      // Created this new entry in our table
      else {

        createdEventsIdAndYear.push({ id: params.Item.id, year: params.Item.year });
        callback(null, 'Successfully put item in DynamoDB');

      }

    });

  });
  after(() => {

    // Restore our DynamoDB Table
    AWSMock.restore('DynamoDB.DocumentClient');

  });

  it('return 406 for trying to create an event with no id', async () => {

    const invalidPayload = {
      ...eventPayload
    };
    delete invalidPayload.id;

    const response = await wrapped.run({ body: JSON.stringify(invalidPayload) });
    expect(response.statusCode).to.be.equal(406);

  });

  it('return 406 for trying to create an event with no year', async () => {

    const invalidPayload = {
      ...eventPayload
    };
    delete invalidPayload.year;

    const response = await wrapped.run({ body: JSON.stringify(invalidPayload) });
    expect(response.statusCode).to.be.equal(406);

  });

  it('return 406 for trying to create an event with invalid capac', async () => {

    const invalidPayload = {
      ...eventPayload
    };
    delete invalidPayload.capac;

    const response = await wrapped.run({ body: JSON.stringify(invalidPayload) });
    expect(response.statusCode).to.be.equal(406);

  });

  it('return 201 for successfully creating an event', async () => {

    const payload = {
      ...eventPayload,
    };

    const response = await wrapped.run({ body: JSON.stringify(payload) });
    expect(response.statusCode).to.be.equal(201);

  });

  it('return 409 for trying to create an event with the same id and year', async () => {

    const payload = {
      ...eventPayload,
    };

    const response = await wrapped.run({ body: JSON.stringify(payload) });
    expect(response.statusCode).to.be.equal(409);

  });

  it('return 201 for successfully creating another event with same id but different year', async () => {

    const payload = {
      ...eventPayload,
      year: 1000,
      id: 'localTestEvent'
    };

    const response = await wrapped.run({ body: JSON.stringify(payload) });
    expect(response.statusCode).to.be.equal(201);

  });

  it('return 201 for successfully creating another event with same year but different id', async () => {

    const payload = {
      ...eventPayload,
      year: 1000,
      id: 'localTestEvent10000'
    };
    console.log(payload);

    const response = await wrapped.run({ body: JSON.stringify(payload) });
    expect(response.statusCode).to.be.equal(201);

  });

});
