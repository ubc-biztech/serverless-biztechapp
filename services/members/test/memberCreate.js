'use strict';

// tests for memberCreate
// Generated by serverless-mocha-plugin

import mochaPlugin from 'serverless-mocha-plugin';
const expect = mochaPlugin.chai.expect;
import AWSMock from 'aws-sdk-mock';
let wrapped = mochaPlugin.getWrapper('memberCreate', '/handler.js', 'create');

const email = 'test@gmail.com';
const testEntry = {
  email: email,
  pronouns: 'He/Him',
  major: 'BUCS',
  prevMember: 'yes',
  international: 'yes',
  topics: 'Cyber Security, Careers in the Tech Industry',
  heardFrom: 'Instagram',
  verificationCode: 'bizbot',
};

describe('memberCreate', () => {

  beforeEach(() => {

    AWSMock.mock('DynamoDB.DocumentClient', 'put', function (params, callback) {

      Promise.resolve(
        callback(null, {
          Item: 'not null member',
        })
      );

    });

  });

  it('returns 201 when given valid data', async () => {

    const response = await wrapped.run({ body: JSON.stringify(testEntry) });
    expect(response.statusCode).to.equal(201);
    const responseBody = JSON.parse(response.body);
    expect(responseBody.params.Item.id).to.equal(email);

  });

  it('returns 406 when not given email', async () => {

    const body = {
      ...testEntry,
    };
    delete body.email;

    const response = await wrapped.run({ body: JSON.stringify(body) });
    expect(response.statusCode).to.equal(406);
    const responseBody = JSON.parse(response.body);
    expect(responseBody.message).to.equal('Invalid email');

  });

  it('returns 401 when not given verification code', async () => {

    const body = {
      ...testEntry,
    };
    delete body.verificationCode;

    const response = await wrapped.run({ body: JSON.stringify(body) });
    expect(response.statusCode).to.equal(401);
    const responseBody = JSON.parse(response.body);
    expect(responseBody.message).to.equal('Missing verification code');

  });

  it('returns 401 when given incorrect verification code', async () => {

    const body = {
      ...testEntry,
    };
    body.verificationCode = 'invalidCode';

    const response = await wrapped.run({ body: JSON.stringify(body) });
    expect(response.statusCode).to.equal(401);
    const responseBody = JSON.parse(response.body);
    expect(responseBody.message).to.equal('Invalid verification code');

  });

});
