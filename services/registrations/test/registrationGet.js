"use strict";

// tests for registrationGet
// Generated by serverless-mocha-plugin

import mochaPlugin from "serverless-mocha-plugin";
const expect = mochaPlugin.chai.expect;
import AWSMock from "aws-sdk-mock";
let wrapped = mochaPlugin.getWrapper("registrationGet", "/handler.js", "get");

const email = "test@gmail.com";

const registrationPayload = [{
  id: email,
  ["eventID;year"]: "event;2020",
  updatedAt: 1600669844493
}, {
  id: email,
  ["eventID;year"]: "event;2020",
  updatedAt: 1600669844493
}];

describe("registrationUpdateHelper", () => {
  before(() => {
    const callbackReturn = {
      Items: registrationPayload
    };

    AWSMock.mock("DynamoDB.DocumentClient", "scan", function (params, callback) {
      callback(null, callbackReturn);
      return null;
    });
  });

  after(() => {
    AWSMock.restore("DynamoDB.DocumentClient");
  });

  it("return 400 when queryString is not given ", async () => {
    const response = await wrapped.run({
    });
    expect(response.statusCode).to.be.equal(400);
  });

  it("return 400 when queryString is missing both eventID and email ", async () => {
    const response = await wrapped.run({
      queryStringParameters: {
        registrationStatus: "status"
      }
    });
    expect(response.statusCode).to.be.equal(400);
  });

  it("return 200 for successful get with eventID and year but no email", async () => {
    const response = await wrapped.run({
      queryStringParameters: {
        eventID: "event",
        year: 2020,
      }
    });
    expect(response.statusCode).to.equal(200);
  });

  it("return 200 for successful get with email and no eventID or year", async () => {
    const response = await wrapped.run({
      queryStringParameters: {
        email: email
      }
    });

    expect(response.statusCode).to.equal(200);
  });

  it("return 200 for successful get with both eventID and email", async () => {
    const response = await wrapped.run({
      queryStringParameters: {
        eventID: "event",
        year: 2020,
        email: email
      }
    });

    const body = JSON.parse(response.body);
    expect(response.statusCode).to.equal(200);
    expect(body.size).to.equal(2);
    expect(body.data).to.have.length(2);
  });

  it("return 200 for successful get with email, eventID;year, and recent timestamp", async () => {
    const response = await wrapped.run({
      queryStringParameters: {
        eventID: "event",
        year: 2020,
        email: email,
        afterTimestamp: 1600669844494
      }
    });

    const body = JSON.parse(response.body);
    expect(response.statusCode).to.equal(200);
    expect(body.size).to.equal(0);
    expect(body.data).to.have.length(0);
  });


  it("return 200 for successful get with email, eventID;year, and timestamp", async () => {
    const response = await wrapped.run({
      queryStringParameters: {
        eventID: "event",
        year: 2020,
        email: email,
        afterTimestamp: 1600669844492
      }
    });

    const body = JSON.parse(response.body);
    expect(response.statusCode).to.equal(200);
    expect(body.size).to.equal(2);
    expect(body.data).to.have.length(2);
  });
});
