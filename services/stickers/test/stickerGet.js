'use strict';
import AWSMock from 'aws-sdk-mock';

// tests for stickerGet
// Generated by serverless-mocha-plugin

import mochaPlugin from 'serverless-mocha-plugin';
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('stickerGet', '/handler.js', 'get');

const stickerPayload = {
  id: 'sticker001',
  name: 'i am a sticker',
  url: 'https://www.google.ca'
};

describe('stickerGet', () => {

  before(() => {

    AWSMock.mock('DynamoDB.DocumentClient', 'get', (params, callback) => {

      if (params.Key.id === stickerPayload.id) {

        callback(null, { Item: stickerPayload });

      } else {

        callback(null, { Item: null });

      }

    });

  });

  after(() => {

    AWSMock.restore('DynamoDB.DocumentClient');

  });

  it ('should return 400 if id is missing from path parameters', async () => {

    const response = await wrapped.run({
      pathParameters: {}
    });
    expect(response).to.not.be.empty;
    expect(response.statusCode).to.equal(400);

  });

  it('return 200 response for getting sticker that exists', async() => {

    const response = await wrapped.run({
      pathParameters: {
        id: stickerPayload.id
      }
    });
    expect(response.statusCode).to.be.equal(200);

    const sticker = JSON.parse(response.body);
    expect(sticker).to.have.property('id');
    expect(sticker).to.have.property('name');
    expect(sticker).to.have.property('url');

  });

  it ('should return 404 for trying to get a sticker that does not exist', async () => {

    const response = await wrapped.run({
      pathParameters: {
        id: 'nonExistantSticker'
      }
    });
    expect(response).to.not.be.empty;
    expect(response.statusCode).to.equal(404);

  });

});
