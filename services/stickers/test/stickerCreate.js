'use strict';
import AWSMock from 'aws-sdk-mock';

// tests for stickerCreate
// Generated by serverless-mocha-plugin

import mochaPlugin from 'serverless-mocha-plugin';
import { stickerItem, stickerPayload } from './testData';
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('stickerCreate', '/handler.js', 'create');

describe('stickerCreate', () => {

  let createdStickerIds = [];

  before(() => {

    AWSMock.mock('S3', 'putObject', (params, callback) => {

      console.log('Running mock s3 put');
      callback(null, 'Successfully put sticker into S3 bucket');

    });

    AWSMock.mock('DynamoDB.DocumentClient', 'get', (params, callback) => {

      let returnValue = null;
      if (createdStickerIds.includes(params.Key.id)) returnValue = {
        ...stickerItem,
        id: params.Key.id
      };
      callback(null, { Item: returnValue });

    });

    AWSMock.mock('DynamoDB.DocumentClient', 'put', (params, callback) => {

      if (params.Item.id && createdStickerIds.includes(params.Item.id)) callback('Sticker already exists!');
      else {

        createdStickerIds.push(params.Item.id);
        callback(null, 'Successfully put item in database');

      }

    });


  });

  after(() => {

    AWSMock.restore('DynamoDB.DocumentClient');
    AWSMock.restore('S3');

  });

  it('return 406 for trying to create a sticker with missing required fields in payload', async() => {

    const requiredFields = ['id', 'name', 'image', 'mime'];
    for (let field of requiredFields) {

      const invalidPayload = {
        ...stickerPayload
      };
      delete invalidPayload[field];


      const response = await wrapped.run({ body: JSON.stringify(invalidPayload) });
      expect(response.statusCode).to.be.equal(406);

    }

  });

  it('return 201 for successfully creating a sticker', async() => {

    const response = await wrapped.run({ body: JSON.stringify(stickerPayload) });
    expect(response.statusCode).to.be.equal(201);

  });

  it('return 409 for trying to create a sticker with the same id', async() => {

    const response = await wrapped.run({ body: JSON.stringify(stickerPayload) });
    expect(response.statusCode).to.be.equal(409);

  });

});
