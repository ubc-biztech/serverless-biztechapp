'use strict';
import AWSMock from 'aws-sdk-mock';

// tests for stickerDelete
// Generated by serverless-mocha-plugin

import mochaPlugin from 'serverless-mocha-plugin';
import { stickerItem } from './testData';
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('stickerDelete', '/handler.js', 'del');

describe('stickerDelete', () => {

  let existingStickers = ['sticker001'];

  before(() => {

    AWSMock.mock('DynamoDB.DocumentClient', 'get', (params, callback) => {

      let returnValue = null;
      if(existingStickers.includes(params.Key.id)) returnValue = {
        ...stickerItem,
        id: params.Key.id
      };
      callback(null, { Item: returnValue });

    });


    AWSMock.mock('DynamoDB.DocumentClient', 'delete', (params, callback) => {

      if(params.Key.id && existingStickers.includes(params.Key.id)) {

        callback(null, 'successfully deleted item in database');

      }
      else callback('item not found in database');

    });

  });

  after(() => {

    AWSMock.restore('DynamoDB.DocumentClient');

  });

  it('return 400 for trying to delete a sticker with no id', async () => {


    const response = await wrapped.run({ pathParameters: {} });
    expect(response.statusCode).to.be.equal(400);

  });

  it('return 404 for trying to delete a sticker that doesn\'t exist', async () => {

    const unknownId = 'nonExistantSticker';

    const response = await wrapped.run({ pathParameters: { id: unknownId } });
    expect(response.statusCode).to.be.equal(404);

  });

  it('return 200 for successfully deleting a sticker', async () => {

    const validId = existingStickers[0];

    const response = await wrapped.run({ pathParameters: { id: validId } });
    expect(response.statusCode).to.be.equal(200);

  });

});
