service: biztechApi-interactions
app: biztechapp

plugins:
  - serverless-dynamodb
  - serverless-offline
  - serverless-domain-manager
  - serverless-bundle
  - serverless-prune-plugin
  - serverless-mocha-plugin

provider:
  name: aws
  stage: ${file(../../serverless.common.yml):provider.stage}
  runtime: ${file(../../serverless.common.yml):provider.runtime}
  region: ${file(../../serverless.common.yml):provider.region}
  cfLogs: true
  environment:
    ENVIRONMENT: ${file(../../config.${self:provider.stage}.json):ENVIRONMENT}
    NODE_ENV: ${env:NODE_ENV}
    WS_API_ENDPOINT: https://bwiujsprij.execute-api.us-west-2.amazonaws.com/dev
  timeout: 15 # in seconds
  apiGateway:
    restApiId: !ImportValue ${self:provider.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId: !ImportValue ${self:provider.stage}-ExtApiGatewayRestApiRootResourceId

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        - "arn:aws:dynamodb:us-west-2:432714361962:table/bizConnections${self:provider.environment.ENVIRONMENT}"
        - "arn:aws:dynamodb:us-west-2:432714361962:table/bizConnections${self:provider.environment.ENVIRONMENT}/index/eventID-year"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource:
        - "arn:aws:dynamodb:us-west-2:432714361962:table/biztechNFCScans${self:provider.environment.ENVIRONMENT}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:PutItem
      Resource:
        - "arn:aws:dynamodb:us-west-2:432714361962:table/bizQuests${self:provider.environment.ENVIRONMENT}"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:TransactWriteItems
      Resource:
        - "arn:aws:dynamodb:us-west-2:432714361962:table/biztechProfiles${self:provider.environment.ENVIRONMENT}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
      Resource:
        - "arn:aws:dynamodb:us-west-2:432714361962:table/biztechQRs${self:provider.environment.ENVIRONMENT}"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource:
        - "arn:aws:dynamodb:us-west-2:432714361962:table/biztechMembers2026${self:provider.environment.ENVIRONMENT}"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:us-west-2:432714361962:table/bizWallSockets${self:provider.environment.ENVIRONMENT}
        - arn:aws:dynamodb:us-west-2:432714361962:table/bizWallSockets${self:provider.environment.ENVIRONMENT}/index/byEvent
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:us-west-2:432714361962:table/bizLiveConnections${self:provider.environment.ENVIRONMENT}
        - arn:aws:dynamodb:us-west-2:432714361962:table/bizLiveConnections${self:provider.environment.ENVIRONMENT}/index/recent
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource:
        - arn:aws:execute-api:${self:provider.region}:${aws:accountId}:bn27jq3bal/*/@connections/*

custom:
  prune:
    automatic: true
    number: 3

  bundle:
    sourcemaps: false

  serverless-mocha-plugin:
    testTemplate: ../../lib/testTemplate.ejs

  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: api.ubcbiztech.com
    staging: api-staging.ubcbiztech.com
    dev: api-dev.ubcbiztech.com

  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: ""
    stage: ${self:custom.stage}
    certificateName: ${self:custom.domains.${self:custom.stage}}
    createRoute53Record: true
    endpointType: edge
    apiType: rest
    autoDomain: false

  serverless-offline:
    httpPort: 4010
    lambdaPort: 5010
    websocketPort: 3002

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      heapInitial: 200m
      heapMax: 1g
      convertEmptyValues: true
    stages:
      - dev

functions:
  interactionCreate:
    handler: handler.postInteraction
    events:
      - http:
          path: interactions/
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}

  checkConnection:
    handler: handler.checkConnection
    events:
      - http:
          path: interactions/journal/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}

  interactionJournalGetAll:
    handler: handler.getAllConnections
    events:
      - http:
          path: interactions/journal/
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}

  interactionQuestsGetAll:
    handler: handler.getAllQuests
    events:
      - http:
          path: interactions/quests/
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}

  wallSnapshot:
    handler: handler.getWallSnapshot
    events:
      - http:
          path: interactions/wall
          method: get
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}

  wsConnect:
    handler: handler.wsConnect
    events:
      - websocket:
          route: $connect

  wsDisconnect:
    handler: handler.wsDisconnect
    events:
      - websocket:
          route: $disconnect

  wsSubscribe:
    handler: handler.wsSubscribe
    events:
      - websocket:
          route: subscribe

resources:
  Resources:
    BizWallSocketsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bizWallSockets${self:provider.environment.ENVIRONMENT}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: eventId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: byEvent
            KeySchema:
              - AttributeName: eventId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    BizLiveConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bizLiveConnections${self:provider.environment.ENVIRONMENT}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: recent
            KeySchema:
              - AttributeName: eventId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
