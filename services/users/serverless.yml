service: biztechApi-users
tenant: ianmh
app: biztechapp

plugins:
  - serverless-dynamodb
  - serverless-offline
  - serverless-domain-manager
  - serverless-bundle
  - serverless-prune-plugin
  - serverless-mocha-plugin

provider:
  name: aws
  stage: ${file(../../serverless.common.yml):provider.stage}
  runtime: ${file(../../serverless.common.yml):provider.runtime}
  region: ${file(../../serverless.common.yml):provider.region}
  cfLogs: true
  environment:
    ENVIRONMENT: ${file(../../config.${self:provider.stage}.json):ENVIRONMENT}
    NODE_ENV: ${env:NODE_ENV}

  apiGateway:
    restApiId: !ImportValue ${self:provider.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId: !ImportValue ${self:provider.stage}-ExtApiGatewayRestApiRootResourceId

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:us-west-2:432714361962:table/biztechUsers${self:provider.environment.ENVIRONMENT}"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource:
        - "arn:aws:dynamodb:us-west-2:432714361962:table/inviteCodes${self:provider.environment.ENVIRONMENT}"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource:
        - "arn:aws:dynamodb:us-west-2:432714361962:table/biztechEvents${self:provider.environment.ENVIRONMENT}"

custom: ${file(../../serverless.common.yml):custom}

build:
  esbuild: false

functions:
  userCreate:
    handler: handler.create
    events:
      - http:
          path: users/
          method: post
          cors: true
  checkUser:
    handler: handler.checkUser
    events:
      - http:
          path: users/check/{email}
          method: get
          request:
            parameters:
              path:
                email: true
            cors: true
  checkUserMembership:
    handler: handler.checkUserMembership
    events:
      - http:
          path: users/checkMembership/{email}
          method: get
          request:
            parameters:
              path:
                email: true
            cors: true
  userGet:
    handler: handler.get
    events:
      - http:
          path: users/{email}
          method: get
          request:
            parameters:
              path:
                email: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}
  userGetAll:
    handler: handler.getAll
    events:
      - http:
          path: users/
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}
  userUpdate:
    handler: handler.update
    events:
      - http:
          path: users/{email}
          method: patch
          request:
            path:
              email: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}
  userFavouriteEvent:
    handler: handler.favouriteEvent
    events:
      - http:
          path: users/favEvent/{email}
          method: patch
          request:
            path:
              email: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}
  userDelete:
    handler: handler.del
    events:
      - http:
          path: users/{email}
          method: delete
          request:
            path:
              email: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:biztechApi-${file(../../serverless.common.yml):provider.stage}.CognitoAuthorizer}
